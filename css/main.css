/*! normalize.css v2.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/* @include span(12); */
.header-in, .footer-in, .project-list_item {
  clear: both;
  /*   margin-left: -$susy-gutter-width/2;
  margin-right: -$susy-gutter-width/2; */ }
  .header-in:after, .footer-in:after, .project-list_item:after {
    content: " ";
    display: block;
    clear: both; }

.btn-main {
  border: 1px solid #fc635e;
  color: #fc635e;
  display: inline-block;
  margin-bottom: 0;
  font-weight: 400;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  background-image: none;
  white-space: nowrap;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  border-radius: 4px;
  text-decoration: none;
  transition: all 0.3s ease-in-out; }
  .btn-main:hover {
    color: #fff;
    background-color: #fc635e; }

.header-in {
  padding: 50px 0 50px 0; }

.header-logo {
  text-align: center; }
  @media (min-width: 0) {
    .header-logo {
      width: 98.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%; } }
  .header-logo h1 {
    font: 4em PT sans, sans-serif;
    font-weight: 100;
    margin: 0;
    padding: 0;
    color: #81b441;
    position: relative;
    display: inline-block; }
    @media (min-width: 0) and (max-width: 34em) {
      .header-logo h1 {
        font: 2em PT sans, sans-serif; } }
    @media (min-width: 34em) and (max-width: 48em) {
      .header-logo h1 {
        font: 2em PT sans, sans-serif; } }
    .header-logo h1 span {
      position: absolute;
      font: 12px "PT Sans";
      top: 10px;
      right: -35px;
      color: #fff;
      background: #252830;
      border-radius: 1px;
      text-align: center;
      padding: 0 2px;
      border: 1px solid #4B465A;
      box-shadow: 2px 2px 1px 1px black; }

.spectar {
  background: transparent linear-gradient(to right, #49c587 0%, #49c587 1%, #4bc9e2 6%, #ff7575 13%, #f0c851 20%, #8d74b9 27%, #f8764f 34%, #49c587 42%, #4bc9e2 49%, #ff7575 56%, #49c587 63%, #ff7575 70%, #f0c851 77%, #8d74b9 84%, #f8764f 91%, #49c587 98%, #49c587 100%) repeat scroll 0 0;
  height: 5px;
  width: 100%; }

.footer {
  min-height: 100px;
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  background-color: #0f151a; }
  .footer-in {
    padding: 30px 10px 30px 10px; }
  @media (min-width: 0) and (max-width: 34em) {
    .footer_copy {
      width: 98.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%;
      text-align: center; } }
  @media (min-width: 34em) {
    .footer_copy {
      width: 48.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%; } }
  @media (min-width: 0) and (max-width: 34em) {
    .footer_links {
      width: 98.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%;
      text-align: center; } }
  @media (min-width: 34em) {
    .footer_links {
      width: 48.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%; } }

*, *:before, *:after {
  box-sizing: border-box; }

html {
  height: 100%; }

body {
  color: #fff;
  background-color: #262626;
  font-size: 13px;
  font-family: 'Raleway';
  line-height: 25px;
  font-weight: 500;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  overflow-x: hidden !important; }

.global-wrap {
  min-height: 100%;
  position: relative; }

.container {
  max-width: 1170px;
  margin-left: auto;
  margin-right: auto;
  padding: 0 15px 0 15px; }
  .container:after {
    content: " ";
    display: block;
    clear: both; }

@media (min-width: 0) and (max-width: 34em) {
  .r-container {
    background-color: red; } }

@media (min-width: 34em) and (max-width: 48em) {
  .r-container {
    background-color: orange; } }

@media (min-width: 48em) and (max-width: 62em) {
  .r-container {
    background-color: yellow; } }

@media (min-width: 62em) and (max-width: 75em) {
  .r-container {
    background-color: green; } }

@media (min-width: 75em) {
  .r-container {
    background-color: blue; } }

.button {
  display: inline-block;
  background: #fff;
  padding: 10px 20px;
  color: #000;
  text-decoration: none;
  border-radius: 10px;
  transition-duration: 0.4s;
  border: 2px solid #0eaede; }
  .button:hover {
    background: #0eaede;
    color: #fff; }

@media (min-width: 0) and (max-width: 34em) {
  .project-list, .term_description, .project-list_item {
    padding: 2px 2px 2px 2px; } }

@media (min-width: 34em) and (max-width: 48em) {
  .project-list, .term_description, .project-list_item {
    padding: 5px 5px 5px 5px; } }

@media (min-width: 48em) {
  .project-list, .term_description, .project-list_item {
    padding: 20px 20px 20px 20px; } }

.project-list, .term_description {
  background: #f5f5f5;
  color: #333;
  border: 1px solid #ededed;
  border-radius: 4px; }
  @media (min-width: 0) and (max-width: 34em) {
    .project-list_details {
      width: 98.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%; } }
  @media (min-width: 48em) {
    .project-list_details {
      width: 48.73418%;
      float: left;
      margin-left: 0.63291%;
      margin-right: 0.63291%; } }
  .project-list_info {
    word-wrap: break-word;
    padding: 10px 20px 10px 20px; }
    @media (min-width: 0) and (max-width: 34em) {
      .project-list_info {
        width: 98.73418%;
        float: left;
        margin-left: 0.63291%;
        margin-right: 0.63291%; } }
    @media (min-width: 48em) {
      .project-list_info {
        width: 48.73418%;
        float: left;
        margin-left: 0.63291%;
        margin-right: 0.63291%; } }
  .project-list_thumbnail a {
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.4);
    display: block;
    margin-bottom: 10px;
    overflow: hidden;
    position: relative;
    transition: all 0.3s ease 0s;
    text-decoration: none; }
  .project-list_date {
    color: #727272; }
  .project-list_desc {
    color: #666; }
  .project-list_title {
    font-family: Ubuntu, Arial, Helvetica, sans-serif;
    font-size: 2em;
    font-weight: bold;
    color: #333333;
    text-align: center;
    padding: 10px 0 30px 0; }
    .project-list_title a {
      text-decoration: none;
      color: #000; }
      .project-list_title a:hover {
        text-decoration: underline; }
  .project-list_btn {
    padding: 10px 0 10px 0; }
    @media (min-width: 0) and (max-width: 34em) {
      .project-list_btn {
        text-align: center; } }

.term_description {
  margin: 0 0 20px 0;
  text-align: center; }
  .term_description span {
    font-size: 1em;
    font-style: italic;
    font-weight: normal; }
  .term_description h2 {
    margin: 0;
    font-size: 1.5em;
    line-height: 1.5em;
    text-transform: uppercase;
    font-family: 'Montserrat';
    color: #30292b;
    letter-spacing: 5px;
    font-weight: 400; }

.project-list_tags {
  color: #727272; }
  .project-list_tags ul {
    list-style-type: none;
    padding: 0; }
  .project-list_tags li {
    display: inline-block;
    margin: 10px 0 10px 0; }
  .project-list_tags a {
    display: inline-block;
    position: relative;
    margin: 0 10px 0 0;
    padding: 5px;
    border: 1px solid #919191;
    border-radius: 5px;
    font-weight: 600;
    letter-spacing: 3px;
    font-size: 10px;
    line-height: 13px;
    color: #919191;
    text-transform: uppercase;
    text-decoration: none; }
    .project-list_tags a:hover {
      border-color: #96588a;
      color: #96588a; }

@media (min-width: 0) {
  .divider {
    width: 98.73418%;
    float: left;
    margin-left: 0.63291%;
    margin-right: 0.63291%; } }

.divider hr {
  background: #e6e6e6;
  border: 0;
  clear: both;
  width: 100%;
  height: 1px;
  padding: 0;
  margin: 40px auto;
  position: relative; }

.image-bg {
  display: block;
  height: 430px;
  position: relative;
  width: 100%; }
  .image-bg:hover .image-shop-scroll {
    background-position: center 100% !important; }
  .image-bg .image-shop-scroll {
    background-position: center 0;
    background-repeat: no-repeat;
    background-size: cover;
    height: 430px;
    left: 0;
    margin: 0 auto;
    position: absolute;
    right: 0;
    top: 0px;
    transition: all 6s ease-out 0s;
    width: 100%; }

/*# sourceMappingURL=data:application/json;base64, */
